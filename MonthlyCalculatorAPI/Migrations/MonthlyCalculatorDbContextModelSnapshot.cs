// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonthlyCalculatorAPI.Contexts;

#nullable disable

namespace MonthlyCalculatorAPI.Migrations
{
    [DbContext(typeof(MonthlyCalculatorDbContext))]
    partial class MonthlyCalculatorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.1.22076.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MonthlyCalculatorAPI.Models.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "mustafa.incik@sahabt.com",
                            IsBlocked = false,
                            Password = "123123"
                        });
                });

            modelBuilder.Entity("MonthlyCalculatorAPI.Models.Entities.Expences.Expence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("ExpenceAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ExpenceHistoryId")
                        .HasColumnType("int");

                    b.Property<int>("ExpenceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpenceHistoryId");

                    b.HasIndex("ExpenceTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Expences");
                });

            modelBuilder.Entity("MonthlyCalculatorAPI.Models.Entities.Expences.ExpenceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ExpenceHistories");
                });

            modelBuilder.Entity("MonthlyCalculatorAPI.Models.Entities.Expences.ExpenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ExpenceTypes");
                });

            modelBuilder.Entity("MonthlyCalculatorAPI.Models.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("MonthlyCalculatorAPI.Models.Entities.Incomes.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("SalaryAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SalaryHistoryId")
                        .HasColumnType("int");

                    b.Property<int>("SalaryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalaryHistoryId");

                    b.HasIndex("SalaryTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("MonthlyCalculatorAPI.Models.Entities.Incomes.SalaryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("SalaryHistories");
                });

            modelBuilder.Entity("MonthlyCalculatorAPI.Models.Entities.Incomes.SalaryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SalaryTypes");
                });

            modelBuilder.Entity("MonthlyCalculatorAPI.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GenderId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MonthlyCalculatorAPI.Models.Entities.Expences.Expence", b =>
                {
                    b.HasOne("MonthlyCalculatorAPI.Models.Entities.Expences.ExpenceHistory", "ExpenceHistory")
                        .WithMany()
                        .HasForeignKey("ExpenceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonthlyCalculatorAPI.Models.Entities.Expences.ExpenceType", "ExpenceType")
                        .WithMany()
                        .HasForeignKey("ExpenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonthlyCalculatorAPI.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpenceHistory");

                    b.Navigation("ExpenceType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MonthlyCalculatorAPI.Models.Entities.Incomes.Salary", b =>
                {
                    b.HasOne("MonthlyCalculatorAPI.Models.Entities.Incomes.SalaryHistory", "SalaryHistory")
                        .WithMany()
                        .HasForeignKey("SalaryHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonthlyCalculatorAPI.Models.Entities.Incomes.SalaryType", "SalaryType")
                        .WithMany()
                        .HasForeignKey("SalaryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonthlyCalculatorAPI.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalaryHistory");

                    b.Navigation("SalaryType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MonthlyCalculatorAPI.Models.Entities.User", b =>
                {
                    b.HasOne("MonthlyCalculatorAPI.Models.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonthlyCalculatorAPI.Models.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Gender");
                });
#pragma warning restore 612, 618
        }
    }
}
